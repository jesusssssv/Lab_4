
PostLab_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000003d8  0000046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800110  00800110  0000047c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b75  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095d  00000000  00000000  000010c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043d  00000000  00000000  00001a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00001e64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000555  00000000  00000000  00001fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000206  00000000  00000000  00002521  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002727  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_3>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__vector_21>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e8 ed       	ldi	r30, 0xD8	; 216
  c8:	f3 e0       	ldi	r31, 0x03	; 3
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 31       	cpi	r26, 0x10	; 16
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 e1       	ldi	r26, 0x10	; 16
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	af 31       	cpi	r26, 0x1F	; 31
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 ca 00 	call	0x194	; 0x194 <main>
  ea:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <deshabilitar_uart>:
// NON-INTERRUPT SUBROUTINES 
/*************************************/
// Función para deshabilitar UART - Necesario para usar PD0/PD1 como I/O normales
void deshabilitar_uart(void) {
    // Deshabilitar USART
    UCSR0B = 0x00;  // Deshabilitar transmisor y receptor
  f2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    
    // Configurar pines RX y TX como I/O digitales normales
    LED_DDR |= (1 << RX_PIN) | (1 << TX_PIN);
  f6:	8a b1       	in	r24, 0x0a	; 10
  f8:	83 60       	ori	r24, 0x03	; 3
  fa:	8a b9       	out	0x0a, r24	; 10
  fc:	08 95       	ret

000000fe <inicializar_pines>:
}

// Función para inicializar los pines
void inicializar_pines(void) {
    // Deshabilitar UART primero para poder usar RX/TX
    deshabilitar_uart();
  fe:	0e 94 79 00 	call	0xf2	; 0xf2 <deshabilitar_uart>
    
    // Configurar los pines de los LEDs y displays como salidas (PORTD0-PORTD7)
    LED_DDR = 0xFF;  // 0xFF = todos los bits a 1 = todos como salidas
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	8a b9       	out	0x0a, r24	; 10
    LED_PORT = 0x00; // Inicialmente todos los LEDs apagados
 106:	1b b8       	out	0x0b, r1	; 11
    
    // Configurar pines de multiplexado como salidas
    MUX_DDR |= (1 << MUX_LEDS) | (1 << MUX_DISP1) | (1 << MUX_DISP2);
 108:	87 b1       	in	r24, 0x07	; 7
 10a:	8e 60       	ori	r24, 0x0E	; 14
 10c:	87 b9       	out	0x07, r24	; 7
    // Inicialmente todos desactivados (nivel bajo)
    MUX_PORT &= ~((1 << MUX_LEDS) | (1 << MUX_DISP1) | (1 << MUX_DISP2)); 
 10e:	88 b1       	in	r24, 0x08	; 8
 110:	81 7f       	andi	r24, 0xF1	; 241
 112:	88 b9       	out	0x08, r24	; 8
    
    // Configurar los pines de los botones como entradas con pull-up
    DDRB &= ~(1 << BTN_INCREMENT) & ~(1 << BTN_DECREMENT);  // Configurar como entradas
 114:	84 b1       	in	r24, 0x04	; 4
 116:	8c 7f       	andi	r24, 0xFC	; 252
 118:	84 b9       	out	0x04, r24	; 4
    PORTB |= (1 << BTN_INCREMENT) | (1 << BTN_DECREMENT);   // Activar resistencias pull-up
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	83 60       	ori	r24, 0x03	; 3
 11e:	85 b9       	out	0x05, r24	; 5
    
    // Configurar pin change interrupt para PORTB
    PCICR |= (1 << PCIE0);   // Habilitar interrupciones para PORTB
 120:	e8 e6       	ldi	r30, 0x68	; 104
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	81 60       	ori	r24, 0x01	; 1
 128:	80 83       	st	Z, r24
    PCMSK0 |= (1 << PCINT0) | (1 << PCINT1);  // Habilitar interrupciones para PB0 y PB1
 12a:	eb e6       	ldi	r30, 0x6B	; 107
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	83 60       	ori	r24, 0x03	; 3
 132:	80 83       	st	Z, r24
    
    // Configurar el pin del LED de alarma como salida
    DDRB |= (1 << ALARM_LED);     // Configura PORTB5 como salida
 134:	84 b1       	in	r24, 0x04	; 4
 136:	80 62       	ori	r24, 0x20	; 32
 138:	84 b9       	out	0x04, r24	; 4
    PORTB &= ~(1 << ALARM_LED);   // Inicialmente apagado
 13a:	85 b1       	in	r24, 0x05	; 5
 13c:	8f 7d       	andi	r24, 0xDF	; 223
 13e:	85 b9       	out	0x05, r24	; 5
 140:	08 95       	ret

00000142 <inicializar_adc>:
}

// Función para inicializar el ADC
void inicializar_adc(void) {
    // Configurar referencia a AVCC (VCC) con capacitor en AREF
    ADMUX = (1 << REFS0);  // AVCC como referencia, ajuste a la derecha (ADLAR=0)
 142:	ec e7       	ldi	r30, 0x7C	; 124
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 e4       	ldi	r24, 0x40	; 64
 148:	80 83       	st	Z, r24
    
    // Seleccionar canal ADC6 manteniendo la configuración de referencia
    ADMUX = (ADMUX & 0xF0) | (ADC_CHANNEL & 0x0F);
 14a:	80 81       	ld	r24, Z
 14c:	80 7f       	andi	r24, 0xF0	; 240
 14e:	86 60       	ori	r24, 0x06	; 6
 150:	80 83       	st	Z, r24
    
    // Habilitar ADC con interrupciones y prescaler 128
    // ADEN: ADC Enable - Activa el ADC
    // ADIE: ADC Interrupt Enable - Habilita las interrupciones del ADC
    // ADPS2-0: ADC Prescaler Select - Divisor de 128 para frecuencia ADC entre 50-200kHz
    ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 152:	8f e8       	ldi	r24, 0x8F	; 143
 154:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 158:	08 95       	ret

0000015a <inicializar_timer0>:
}

// Función para inicializar Timer0 para multiplexado
void inicializar_timer0(void) {
    // Configurar Timer0 en modo CTC (Clear Timer on Compare Match)
    TCCR0A = (1 << WGM01);
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	84 bd       	out	0x24, r24	; 36
    
    // Prescaler 64 - Divide la frecuencia del reloj por 64
    TCCR0B = (1 << CS01) | (1 << CS00);
 15e:	93 e0       	ldi	r25, 0x03	; 3
 160:	95 bd       	out	0x25, r25	; 37
    
    // Comparación para aproximadamente 1ms
    // Cálculo: (16MHz / 64) / 1000Hz - 1 = 249
    OCR0A = 249;
 162:	99 ef       	ldi	r25, 0xF9	; 249
 164:	97 bd       	out	0x27, r25	; 39
    
    // Habilitar interrupción por comparación - Se ejecutará cada 1ms
    TIMSK0 = (1 << OCIE0A);
 166:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 16a:	08 95       	ret

0000016c <iniciar_conversion_adc>:
}

// Función para iniciar una conversión ADC - Simplificada vs. versión original
void iniciar_conversion_adc(void) {
    // Iniciar conversión (ADC Start Conversion)
    ADCSRA |= (1 << ADSC);
 16c:	ea e7       	ldi	r30, 0x7A	; 122
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	80 64       	ori	r24, 0x40	; 64
 174:	80 83       	st	Z, r24
 176:	08 95       	ret

00000178 <actualizar_led_alarma>:
}

// Función para actualizar el estado del LED de alarma
void actualizar_led_alarma(void) {
    // Compara el valor del ADC (contador_displays) con el contador binario (contador_leds)
    if (contador_displays > contador_leds) {
 178:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <contador_displays>
 17c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <contador_leds>
 180:	89 17       	cp	r24, r25
 182:	20 f4       	brcc	.+8      	; 0x18c <actualizar_led_alarma+0x14>
        // Si es mayor, enciende el LED de alarma
        PORTB |= (1 << ALARM_LED);
 184:	85 b1       	in	r24, 0x05	; 5
 186:	80 62       	ori	r24, 0x20	; 32
 188:	85 b9       	out	0x05, r24	; 5
 18a:	08 95       	ret
    } else {
        // Si es menor o igual, apaga el LED de alarma
        PORTB &= ~(1 << ALARM_LED);
 18c:	85 b1       	in	r24, 0x05	; 5
 18e:	8f 7d       	andi	r24, 0xDF	; 223
 190:	85 b9       	out	0x05, r24	; 5
 192:	08 95       	ret

00000194 <main>:
/*********************************/
// MAIN FUNCTION
/*********************************/
int main(void) {
    // Inicializar pines
    inicializar_pines();
 194:	0e 94 7f 00 	call	0xfe	; 0xfe <inicializar_pines>
    
    // Inicializar ADC
    inicializar_adc();
 198:	0e 94 a1 00 	call	0x142	; 0x142 <inicializar_adc>
    
    // Inicializar Timer0 para multiplexado
    inicializar_timer0();
 19c:	0e 94 ad 00 	call	0x15a	; 0x15a <inicializar_timer0>
    
    // Iniciar primera conversión ADC - El resto será automático mediante interrupciones
    iniciar_conversion_adc();
 1a0:	0e 94 b6 00 	call	0x16c	; 0x16c <iniciar_conversion_adc>
    
    // Habilitar interrupciones globales - Activa el sistema de interrupciones
    sei();
 1a4:	78 94       	sei
    
    // Bucle principal - Optimizado, ya no usa delays
    while (1) {
        // Comprobar si hay una nueva lectura de ADC disponible usando la bandera
        if (adc_ready) {
 1a6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <adc_ready>
 1aa:	88 23       	and	r24, r24
 1ac:	e1 f3       	breq	.-8      	; 0x1a6 <main+0x12>
            // Convertir valor ADC (10 bits) a valor de 8 bits para los displays
            // Divide por 4 usando desplazamiento de bits (más eficiente que división)
            contador_displays = (uint8_t)(adc_value >> 2);
 1ae:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <adc_value>
 1b2:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <adc_value+0x1>
 1b6:	96 95       	lsr	r25
 1b8:	87 95       	ror	r24
 1ba:	96 95       	lsr	r25
 1bc:	87 95       	ror	r24
 1be:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <contador_displays>
            adc_ready = 0;  // Reiniciar la bandera
 1c2:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <adc_ready>
            
            // Actualizar el LED de alarma basado en la comparación entre contador_displays y contador_leds
            actualizar_led_alarma();
 1c6:	0e 94 bc 00 	call	0x178	; 0x178 <actualizar_led_alarma>
            
            // Iniciar siguiente conversión ADC
            iniciar_conversion_adc();
 1ca:	0e 94 b6 00 	call	0x16c	; 0x16c <iniciar_conversion_adc>
 1ce:	eb cf       	rjmp	.-42     	; 0x1a6 <main+0x12>

000001d0 <__vector_3>:

/******************************************/
// RUTINAS DE INTERRUPCIÓN
/******************************************/
// Rutina de servicio de interrupción para cambios en PORTB (botones)
ISR(PCINT0_vect) {
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	2f 93       	push	r18
 1dc:	3f 93       	push	r19
 1de:	4f 93       	push	r20
 1e0:	5f 93       	push	r21
 1e2:	6f 93       	push	r22
 1e4:	7f 93       	push	r23
 1e6:	8f 93       	push	r24
 1e8:	9f 93       	push	r25
 1ea:	af 93       	push	r26
 1ec:	bf 93       	push	r27
 1ee:	ef 93       	push	r30
 1f0:	ff 93       	push	r31
    // Como el antirebote es por hardware, podemos procesar directamente
    
    // Verificar si el botón de incremento ha sido presionado (activo en bajo)
    if (!(PINB & (1 << BTN_INCREMENT))) {
 1f2:	18 99       	sbic	0x03, 0	; 3
 1f4:	07 c0       	rjmp	.+14     	; 0x204 <__vector_3+0x34>
        contador_leds++;  // Solo incrementa el contador de LEDs
 1f6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <contador_leds>
 1fa:	8f 5f       	subi	r24, 0xFF	; 255
 1fc:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <contador_leds>
        actualizar_led_alarma();  // Actualizar el LED de alarma al cambiar contador_leds
 200:	0e 94 bc 00 	call	0x178	; 0x178 <actualizar_led_alarma>
    }
    
    // Verificar si el botón de decremento ha sido presionado (activo en bajo)
    if (!(PINB & (1 << BTN_DECREMENT))) {
 204:	19 99       	sbic	0x03, 1	; 3
 206:	07 c0       	rjmp	.+14     	; 0x216 <__vector_3+0x46>
        contador_leds--;  // Solo decrementa el contador de LEDs
 208:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <contador_leds>
 20c:	81 50       	subi	r24, 0x01	; 1
 20e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <contador_leds>
        actualizar_led_alarma();  // Actualizar el LED de alarma al cambiar contador_leds
 212:	0e 94 bc 00 	call	0x178	; 0x178 <actualizar_led_alarma>
    }
}
 216:	ff 91       	pop	r31
 218:	ef 91       	pop	r30
 21a:	bf 91       	pop	r27
 21c:	af 91       	pop	r26
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	7f 91       	pop	r23
 224:	6f 91       	pop	r22
 226:	5f 91       	pop	r21
 228:	4f 91       	pop	r20
 22a:	3f 91       	pop	r19
 22c:	2f 91       	pop	r18
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <__vector_21>:

// Rutina de interrupción para ADC completo - Maneja la conversión finalizada
ISR(ADC_vect) {
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	2f 93       	push	r18
 244:	3f 93       	push	r19
 246:	8f 93       	push	r24
 248:	9f 93       	push	r25
 24a:	af 93       	push	r26
 24c:	bf 93       	push	r27
 24e:	ef 93       	push	r30
 250:	ff 93       	push	r31
    // Guardar el resultado ADC
    adc_value = ADC;  // ADC es el registro que contiene el valor de conversión
 252:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 256:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 25a:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <adc_value+0x1>
 25e:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <adc_value>
    // Reduce el parpadeo en los displays causado por fluctuaciones
    static uint16_t adc_values[4] = {0, 0, 0, 0};  // Almacena las últimas 4 lecturas
    static uint8_t adc_index = 0;                  // Índice para actualizar el arreglo circular
    
    // Actualizar el arreglo circular con el nuevo valor
    adc_values[adc_index] = adc_value;
 262:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <adc_index.1651>
 266:	e8 2f       	mov	r30, r24
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <adc_value>
 26e:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <adc_value+0x1>
 272:	a1 e1       	ldi	r26, 0x11	; 17
 274:	b1 e0       	ldi	r27, 0x01	; 1
 276:	ee 0f       	add	r30, r30
 278:	ff 1f       	adc	r31, r31
 27a:	ef 5e       	subi	r30, 0xEF	; 239
 27c:	fe 4f       	sbci	r31, 0xFE	; 254
 27e:	31 83       	std	Z+1, r19	; 0x01
 280:	20 83       	st	Z, r18
    // Incrementar el índice y volver a 0 al llegar a 4 (modulo 4)
    // Optimizado usando operación AND bit a bit (más rápido que división)
    adc_index = (adc_index + 1) & 0x03;  // Equivalente a (adc_index + 1) % 4
 282:	8f 5f       	subi	r24, 0xFF	; 255
 284:	83 70       	andi	r24, 0x03	; 3
 286:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <adc_index.1651>
    
    // Calcular promedio dividiendo la suma por 4
    // Usamos shift right (>>) que es más eficiente que la división
    adc_value = (adc_values[0] + adc_values[1] + adc_values[2] + adc_values[3]) >> 2;
 28a:	2d 91       	ld	r18, X+
 28c:	3c 91       	ld	r19, X
 28e:	11 97       	sbiw	r26, 0x01	; 1
 290:	12 96       	adiw	r26, 0x02	; 2
 292:	8d 91       	ld	r24, X+
 294:	9c 91       	ld	r25, X
 296:	13 97       	sbiw	r26, 0x03	; 3
 298:	82 0f       	add	r24, r18
 29a:	93 1f       	adc	r25, r19
 29c:	14 96       	adiw	r26, 0x04	; 4
 29e:	2d 91       	ld	r18, X+
 2a0:	3c 91       	ld	r19, X
 2a2:	15 97       	sbiw	r26, 0x05	; 5
 2a4:	82 0f       	add	r24, r18
 2a6:	93 1f       	adc	r25, r19
 2a8:	16 96       	adiw	r26, 0x06	; 6
 2aa:	2d 91       	ld	r18, X+
 2ac:	3c 91       	ld	r19, X
 2ae:	17 97       	sbiw	r26, 0x07	; 7
 2b0:	82 0f       	add	r24, r18
 2b2:	93 1f       	adc	r25, r19
 2b4:	96 95       	lsr	r25
 2b6:	87 95       	ror	r24
 2b8:	96 95       	lsr	r25
 2ba:	87 95       	ror	r24
 2bc:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <adc_value+0x1>
 2c0:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <adc_value>
    
    // Marcar que hay un nuevo valor disponible para el bucle principal
    adc_ready = 1;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <adc_ready>
}
 2ca:	ff 91       	pop	r31
 2cc:	ef 91       	pop	r30
 2ce:	bf 91       	pop	r27
 2d0:	af 91       	pop	r26
 2d2:	9f 91       	pop	r25
 2d4:	8f 91       	pop	r24
 2d6:	3f 91       	pop	r19
 2d8:	2f 91       	pop	r18
 2da:	0f 90       	pop	r0
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	0f 90       	pop	r0
 2e0:	1f 90       	pop	r1
 2e2:	18 95       	reti

000002e4 <__vector_14>:

// Rutina de interrupción para Timer0 (multiplexado de displays)
// Se ejecuta aproximadamente cada 1ms para actualizar la pantalla
ISR(TIMER0_COMPA_vect) {
 2e4:	1f 92       	push	r1
 2e6:	0f 92       	push	r0
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	0f 92       	push	r0
 2ec:	11 24       	eor	r1, r1
 2ee:	5f 93       	push	r21
 2f0:	6f 93       	push	r22
 2f2:	7f 93       	push	r23
 2f4:	8f 93       	push	r24
 2f6:	9f 93       	push	r25
 2f8:	af 93       	push	r26
 2fa:	bf 93       	push	r27
 2fc:	ef 93       	push	r30
 2fe:	ff 93       	push	r31
    static uint8_t mux_state = 0;  // Estado de multiplexado (0-2)
    
    // Desactivar todos los dispositivos antes de actualizar
    MUX_PORT &= ~((1 << MUX_LEDS) | (1 << MUX_DISP1) | (1 << MUX_DISP2));
 300:	88 b1       	in	r24, 0x08	; 8
 302:	81 7f       	andi	r24, 0xF1	; 241
 304:	88 b9       	out	0x08, r24	; 8
    
    // Multiplexado rotativo entre LEDs y displays
    switch (mux_state) {
 306:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	59 f0       	breq	.+22     	; 0x324 <__vector_14+0x40>
 30e:	18 f0       	brcs	.+6      	; 0x316 <__vector_14+0x32>
 310:	82 30       	cpi	r24, 0x02	; 2
 312:	a1 f0       	breq	.+40     	; 0x33c <__vector_14+0x58>
 314:	1f c0       	rjmp	.+62     	; 0x354 <__vector_14+0x70>
        case 0: // Mostrar LEDs controlados por botones
            LED_PORT = contador_leds;  // Muestra el valor binario en LEDs
 316:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <contador_leds>
 31a:	8b b9       	out	0x0b, r24	; 11
            MUX_PORT |= (1 << MUX_LEDS);  // Activa el multiplexor para LEDs
 31c:	88 b1       	in	r24, 0x08	; 8
 31e:	82 60       	ori	r24, 0x02	; 2
 320:	88 b9       	out	0x08, r24	; 8
            break;
 322:	18 c0       	rjmp	.+48     	; 0x354 <__vector_14+0x70>
            
        case 1: // Mostrar dígito de unidades hexadecimal (Display 1) - controlado por ADC
            // Obtiene los 4 bits menos significativos y busca el patrón correspondiente
            LED_PORT = display_7seg[contador_displays & 0x0F];
 324:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <contador_displays>
 328:	ef 70       	andi	r30, 0x0F	; 15
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	e0 50       	subi	r30, 0x00	; 0
 32e:	ff 4f       	sbci	r31, 0xFF	; 255
 330:	80 81       	ld	r24, Z
 332:	8b b9       	out	0x0b, r24	; 11
            MUX_PORT |= (1 << MUX_DISP1);  // Activa el display 1
 334:	88 b1       	in	r24, 0x08	; 8
 336:	84 60       	ori	r24, 0x04	; 4
 338:	88 b9       	out	0x08, r24	; 8
            break;
 33a:	0c c0       	rjmp	.+24     	; 0x354 <__vector_14+0x70>
            
        case 2: // Mostrar dígito de decenas hexadecimal (Display 2) - controlado por ADC
            // Obtiene los 4 bits más significativos y busca el patrón correspondiente
            LED_PORT = display_7seg[(contador_displays >> 4) & 0x0F];
 33c:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <contador_displays>
 340:	e2 95       	swap	r30
 342:	ef 70       	andi	r30, 0x0F	; 15
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	e0 50       	subi	r30, 0x00	; 0
 348:	ff 4f       	sbci	r31, 0xFF	; 255
 34a:	80 81       	ld	r24, Z
 34c:	8b b9       	out	0x0b, r24	; 11
            MUX_PORT |= (1 << MUX_DISP2);  // Activa el display 2
 34e:	88 b1       	in	r24, 0x08	; 8
 350:	88 60       	ori	r24, 0x08	; 8
 352:	88 b9       	out	0x08, r24	; 8
            break;
    }
    
    // Avanzar al siguiente estado (0->1->2->0...)
    mux_state = (mux_state + 1) % 3;  // Cicla entre 0, 1 y 2
 354:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	63 e0       	ldi	r22, 0x03	; 3
 35e:	70 e0       	ldi	r23, 0x00	; 0
 360:	0e 94 c2 01 	call	0x384	; 0x384 <__divmodhi4>
 364:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
}
 368:	ff 91       	pop	r31
 36a:	ef 91       	pop	r30
 36c:	bf 91       	pop	r27
 36e:	af 91       	pop	r26
 370:	9f 91       	pop	r25
 372:	8f 91       	pop	r24
 374:	7f 91       	pop	r23
 376:	6f 91       	pop	r22
 378:	5f 91       	pop	r21
 37a:	0f 90       	pop	r0
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	0f 90       	pop	r0
 380:	1f 90       	pop	r1
 382:	18 95       	reti

00000384 <__divmodhi4>:
 384:	97 fb       	bst	r25, 7
 386:	07 2e       	mov	r0, r23
 388:	16 f4       	brtc	.+4      	; 0x38e <__divmodhi4+0xa>
 38a:	00 94       	com	r0
 38c:	07 d0       	rcall	.+14     	; 0x39c <__divmodhi4_neg1>
 38e:	77 fd       	sbrc	r23, 7
 390:	09 d0       	rcall	.+18     	; 0x3a4 <__divmodhi4_neg2>
 392:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__udivmodhi4>
 396:	07 fc       	sbrc	r0, 7
 398:	05 d0       	rcall	.+10     	; 0x3a4 <__divmodhi4_neg2>
 39a:	3e f4       	brtc	.+14     	; 0x3aa <__divmodhi4_exit>

0000039c <__divmodhi4_neg1>:
 39c:	90 95       	com	r25
 39e:	81 95       	neg	r24
 3a0:	9f 4f       	sbci	r25, 0xFF	; 255
 3a2:	08 95       	ret

000003a4 <__divmodhi4_neg2>:
 3a4:	70 95       	com	r23
 3a6:	61 95       	neg	r22
 3a8:	7f 4f       	sbci	r23, 0xFF	; 255

000003aa <__divmodhi4_exit>:
 3aa:	08 95       	ret

000003ac <__udivmodhi4>:
 3ac:	aa 1b       	sub	r26, r26
 3ae:	bb 1b       	sub	r27, r27
 3b0:	51 e1       	ldi	r21, 0x11	; 17
 3b2:	07 c0       	rjmp	.+14     	; 0x3c2 <__udivmodhi4_ep>

000003b4 <__udivmodhi4_loop>:
 3b4:	aa 1f       	adc	r26, r26
 3b6:	bb 1f       	adc	r27, r27
 3b8:	a6 17       	cp	r26, r22
 3ba:	b7 07       	cpc	r27, r23
 3bc:	10 f0       	brcs	.+4      	; 0x3c2 <__udivmodhi4_ep>
 3be:	a6 1b       	sub	r26, r22
 3c0:	b7 0b       	sbc	r27, r23

000003c2 <__udivmodhi4_ep>:
 3c2:	88 1f       	adc	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	5a 95       	dec	r21
 3c8:	a9 f7       	brne	.-22     	; 0x3b4 <__udivmodhi4_loop>
 3ca:	80 95       	com	r24
 3cc:	90 95       	com	r25
 3ce:	bc 01       	movw	r22, r24
 3d0:	cd 01       	movw	r24, r26
 3d2:	08 95       	ret

000003d4 <_exit>:
 3d4:	f8 94       	cli

000003d6 <__stop_program>:
 3d6:	ff cf       	rjmp	.-2      	; 0x3d6 <__stop_program>
