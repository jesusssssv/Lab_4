
Lab_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000002e6  0000037a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800110  00800110  0000038a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b61  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a00  00000000  00000000  00000fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000446  00000000  00000000  000019b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000549  00000000  00000000  00001ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e0  00000000  00000000  00002421  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002501  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__vector_3>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e6 ee       	ldi	r30, 0xE6	; 230
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 31       	cpi	r26, 0x10	; 16
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 e1       	ldi	r26, 0x10	; 16
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a5 31       	cpi	r26, 0x15	; 21
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  ea:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <deshabilitar_uart>:
// NON-INTERRUPT SUBROUTINES 
/*************************************/
// Función para deshabilitar UART
void deshabilitar_uart(void) {
    // Deshabilitar USART
    UCSR0B = 0x00;  // Deshabilitar transmisor y receptor
  f2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    
    // Configurar pines RX y TX como I/O digitales normales
    LED_DDR |= (1 << RX_PIN) | (1 << TX_PIN);
  f6:	8a b1       	in	r24, 0x0a	; 10
  f8:	83 60       	ori	r24, 0x03	; 3
  fa:	8a b9       	out	0x0a, r24	; 10
  fc:	08 95       	ret

000000fe <inicializar_pines>:
}

// Función para inicializar los pines
void inicializar_pines(void) {
    // Deshabilitar UART primero
    deshabilitar_uart();
  fe:	0e 94 79 00 	call	0xf2	; 0xf2 <deshabilitar_uart>
    
    // Configurar los pines de los LEDs y displays como salidas (PORTD0-PORTD7)
    LED_DDR = 0xFF;
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	8a b9       	out	0x0a, r24	; 10
    LED_PORT = 0x00; // Inicialmente todos los LEDs apagados
 106:	1b b8       	out	0x0b, r1	; 11
    
    // Configurar pines de multiplexado como salidas
    MUX_DDR |= (1 << MUX_LEDS) | (1 << MUX_DISP1) | (1 << MUX_DISP2);
 108:	87 b1       	in	r24, 0x07	; 7
 10a:	8e 60       	ori	r24, 0x0E	; 14
 10c:	87 b9       	out	0x07, r24	; 7
    MUX_PORT &= ~((1 << MUX_LEDS) | (1 << MUX_DISP1) | (1 << MUX_DISP2)); // Inicialmente todos desactivados
 10e:	88 b1       	in	r24, 0x08	; 8
 110:	81 7f       	andi	r24, 0xF1	; 241
 112:	88 b9       	out	0x08, r24	; 8
    
    // Configurar los pines de los botones como entradas con pull-up
    DDRB &= ~(1 << BTN_INCREMENT) & ~(1 << BTN_DECREMENT);
 114:	84 b1       	in	r24, 0x04	; 4
 116:	8c 7f       	andi	r24, 0xFC	; 252
 118:	84 b9       	out	0x04, r24	; 4
    PORTB |= (1 << BTN_INCREMENT) | (1 << BTN_DECREMENT);
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	83 60       	ori	r24, 0x03	; 3
 11e:	85 b9       	out	0x05, r24	; 5
    
    // Configurar pin change interrupt para PORTB
    PCICR |= (1 << PCIE0);   // Habilitar interrupciones para PORTB
 120:	e8 e6       	ldi	r30, 0x68	; 104
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	81 60       	ori	r24, 0x01	; 1
 128:	80 83       	st	Z, r24
    PCMSK0 |= (1 << PCINT0) | (1 << PCINT1);  // Habilitar interrupciones para PB0 y PB1
 12a:	eb e6       	ldi	r30, 0x6B	; 107
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	83 60       	ori	r24, 0x03	; 3
 132:	80 83       	st	Z, r24
 134:	08 95       	ret

00000136 <inicializar_adc>:

// Función para inicializar el ADC
void inicializar_adc(void) {
	// Configurar referencia a AVCC (VCC) con capacitor en AREF
	// Para ATmega328PB, REFS1=0 y REFS0=1 selecciona AVCC como referencia
	ADMUX = (1 << REFS0);  // AVCC como referencia, ajuste a la derecha (ADLAR=0)
 136:	ec e7       	ldi	r30, 0x7C	; 124
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 e4       	ldi	r24, 0x40	; 64
 13c:	80 83       	st	Z, r24
	
	// Seleccionar canal ADC6 manteniendo la configuración de referencia
	ADMUX = (ADMUX & 0xF0) | (ADC_CHANNEL & 0x0F);
 13e:	80 81       	ld	r24, Z
 140:	80 7f       	andi	r24, 0xF0	; 240
 142:	86 60       	ori	r24, 0x06	; 6
 144:	80 83       	st	Z, r24
	
	// Habilitar ADC, prescaler 128 para frecuencia ADC entre 50-200kHz
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 146:	87 e8       	ldi	r24, 0x87	; 135
 148:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 14c:	08 95       	ret

0000014e <inicializar_timer0>:
}

// Función para inicializar Timer0 para multiplexado
void inicializar_timer0(void) {
    // Configurar Timer0 en modo CTC
    TCCR0A = (1 << WGM01);
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	84 bd       	out	0x24, r24	; 36
    
    // Prescaler 64
    TCCR0B = (1 << CS01) | (1 << CS00);
 152:	93 e0       	ldi	r25, 0x03	; 3
 154:	95 bd       	out	0x25, r25	; 37
    
    // Comparación para aproximadamente 1ms
    OCR0A = 249;  // (16MHz / 64) / 1000Hz - 1 = 249
 156:	99 ef       	ldi	r25, 0xF9	; 249
 158:	97 bd       	out	0x27, r25	; 39
    
    // Habilitar interrupción por comparación
    TIMSK0 = (1 << OCIE0A);
 15a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 15e:	08 95       	ret

00000160 <leer_adc>:
}

// Función para leer el ADC
uint16_t leer_adc(void) {
    // Iniciar conversión
    ADCSRA |= (1 << ADSC);
 160:	ea e7       	ldi	r30, 0x7A	; 122
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	80 64       	ori	r24, 0x40	; 64
 168:	80 83       	st	Z, r24
    
    // Esperar a que termine la conversión
    while (ADCSRA & (1 << ADSC));
 16a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 16e:	86 fd       	sbrc	r24, 6
 170:	fc cf       	rjmp	.-8      	; 0x16a <leer_adc+0xa>
    
    // Retornar resultado
    return ADC;
 172:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 176:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 17a:	08 95       	ret

0000017c <main>:
/*********************************/
// MAIN FUNCTION
/*********************************/
int main(void) {
    // Inicializar pines
    inicializar_pines();
 17c:	0e 94 7f 00 	call	0xfe	; 0xfe <inicializar_pines>
    
    // Inicializar ADC
    inicializar_adc();
 180:	0e 94 9b 00 	call	0x136	; 0x136 <inicializar_adc>
    
    // Inicializar Timer0 para multiplexado
    inicializar_timer0();
 184:	0e 94 a7 00 	call	0x14e	; 0x14e <inicializar_timer0>
    
    // Habilitar interrupciones globales
    sei();
 188:	78 94       	sei
    
    // Bucle principal
    while (1) {
        // Leer valor del ADC
        adc_value = leer_adc();
 18a:	0e 94 b0 00 	call	0x160	; 0x160 <leer_adc>
 18e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <adc_value+0x1>
 192:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <adc_value>
        
        // Convertir valor ADC (10 bits) a valor de 8 bits para los displays
        contador_displays = (uint8_t)(adc_value >> 2);
 196:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <adc_value>
 19a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <adc_value+0x1>
 19e:	96 95       	lsr	r25
 1a0:	87 95       	ror	r24
 1a2:	96 95       	lsr	r25
 1a4:	87 95       	ror	r24
 1a6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <contador_displays>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1aa:	2f ef       	ldi	r18, 0xFF	; 255
 1ac:	80 e7       	ldi	r24, 0x70	; 112
 1ae:	92 e0       	ldi	r25, 0x02	; 2
 1b0:	21 50       	subi	r18, 0x01	; 1
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <main+0x34>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0x3e>
 1ba:	00 00       	nop
 1bc:	e6 cf       	rjmp	.-52     	; 0x18a <main+0xe>

000001be <__vector_3>:

/******************************************/
// RUTINAS DE INTERRUPCIÓN
/******************************************/
// Rutina de servicio de interrupción para cambios en PORTB
ISR(PCINT0_vect) {
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	8f 93       	push	r24
    // Como el antirebote es por hardware, podemos procesar directamente
    // Verificar qué botón ha sido presionado (solo afecta a contador_leds)
    if (!(PINB & (1 << BTN_INCREMENT))) {
 1ca:	18 99       	sbic	0x03, 0	; 3
 1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <__vector_3+0x1a>
        contador_leds++;  // Solo incrementa el contador de LEDs
 1ce:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <contador_leds>
 1d2:	8f 5f       	subi	r24, 0xFF	; 255
 1d4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <contador_leds>
    }
    
    if (!(PINB & (1 << BTN_DECREMENT))) {
 1d8:	19 99       	sbic	0x03, 1	; 3
 1da:	05 c0       	rjmp	.+10     	; 0x1e6 <__vector_3+0x28>
        contador_leds--;  // Solo decrementa el contador de LEDs
 1dc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <contador_leds>
 1e0:	81 50       	subi	r24, 0x01	; 1
 1e2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <contador_leds>
    }
}
 1e6:	8f 91       	pop	r24
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <__vector_14>:

// Rutina de interrupción para Timer0 (multiplexado de displays)
ISR(TIMER0_COMPA_vect) {
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	5f 93       	push	r21
 1fe:	6f 93       	push	r22
 200:	7f 93       	push	r23
 202:	8f 93       	push	r24
 204:	9f 93       	push	r25
 206:	af 93       	push	r26
 208:	bf 93       	push	r27
 20a:	ef 93       	push	r30
 20c:	ff 93       	push	r31
    static uint8_t mux_state = 0;
    
    // Desactivar todos los dispositivos
    MUX_PORT &= ~((1 << MUX_LEDS) | (1 << MUX_DISP1) | (1 << MUX_DISP2));
 20e:	88 b1       	in	r24, 0x08	; 8
 210:	81 7f       	andi	r24, 0xF1	; 241
 212:	88 b9       	out	0x08, r24	; 8
    
    // Multiplexado rotativo entre LEDs y displays
    switch (mux_state) {
 214:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	59 f0       	breq	.+22     	; 0x232 <__vector_14+0x40>
 21c:	18 f0       	brcs	.+6      	; 0x224 <__vector_14+0x32>
 21e:	82 30       	cpi	r24, 0x02	; 2
 220:	a1 f0       	breq	.+40     	; 0x24a <__vector_14+0x58>
 222:	1f c0       	rjmp	.+62     	; 0x262 <__vector_14+0x70>
        case 0: // Mostrar LEDs controlados por botones
            LED_PORT = contador_leds;
 224:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <contador_leds>
 228:	8b b9       	out	0x0b, r24	; 11
            MUX_PORT |= (1 << MUX_LEDS);
 22a:	88 b1       	in	r24, 0x08	; 8
 22c:	82 60       	ori	r24, 0x02	; 2
 22e:	88 b9       	out	0x08, r24	; 8
            break;
 230:	18 c0       	rjmp	.+48     	; 0x262 <__vector_14+0x70>
            
        case 1: // Mostrar dígito de unidades hexadecimal (Display 1) - controlado por ADC
            LED_PORT = display_7seg[contador_displays & 0x0F];
 232:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <contador_displays>
 236:	ef 70       	andi	r30, 0x0F	; 15
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	e0 50       	subi	r30, 0x00	; 0
 23c:	ff 4f       	sbci	r31, 0xFF	; 255
 23e:	80 81       	ld	r24, Z
 240:	8b b9       	out	0x0b, r24	; 11
            MUX_PORT |= (1 << MUX_DISP1);
 242:	88 b1       	in	r24, 0x08	; 8
 244:	84 60       	ori	r24, 0x04	; 4
 246:	88 b9       	out	0x08, r24	; 8
            break;
 248:	0c c0       	rjmp	.+24     	; 0x262 <__vector_14+0x70>
            
        case 2: // Mostrar dígito de decenas hexadecimal (Display 2) - controlado por ADC
            LED_PORT = display_7seg[(contador_displays >> 4) & 0x0F];
 24a:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <contador_displays>
 24e:	e2 95       	swap	r30
 250:	ef 70       	andi	r30, 0x0F	; 15
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	e0 50       	subi	r30, 0x00	; 0
 256:	ff 4f       	sbci	r31, 0xFF	; 255
 258:	80 81       	ld	r24, Z
 25a:	8b b9       	out	0x0b, r24	; 11
            MUX_PORT |= (1 << MUX_DISP2);
 25c:	88 b1       	in	r24, 0x08	; 8
 25e:	88 60       	ori	r24, 0x08	; 8
 260:	88 b9       	out	0x08, r24	; 8
            break;
    }
    
    // Avanzar al siguiente estado
    mux_state = (mux_state + 1) % 3;
 262:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	63 e0       	ldi	r22, 0x03	; 3
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	0e 94 49 01 	call	0x292	; 0x292 <__divmodhi4>
 272:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
}
 276:	ff 91       	pop	r31
 278:	ef 91       	pop	r30
 27a:	bf 91       	pop	r27
 27c:	af 91       	pop	r26
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	7f 91       	pop	r23
 284:	6f 91       	pop	r22
 286:	5f 91       	pop	r21
 288:	0f 90       	pop	r0
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	0f 90       	pop	r0
 28e:	1f 90       	pop	r1
 290:	18 95       	reti

00000292 <__divmodhi4>:
 292:	97 fb       	bst	r25, 7
 294:	07 2e       	mov	r0, r23
 296:	16 f4       	brtc	.+4      	; 0x29c <__divmodhi4+0xa>
 298:	00 94       	com	r0
 29a:	07 d0       	rcall	.+14     	; 0x2aa <__divmodhi4_neg1>
 29c:	77 fd       	sbrc	r23, 7
 29e:	09 d0       	rcall	.+18     	; 0x2b2 <__divmodhi4_neg2>
 2a0:	0e 94 5d 01 	call	0x2ba	; 0x2ba <__udivmodhi4>
 2a4:	07 fc       	sbrc	r0, 7
 2a6:	05 d0       	rcall	.+10     	; 0x2b2 <__divmodhi4_neg2>
 2a8:	3e f4       	brtc	.+14     	; 0x2b8 <__divmodhi4_exit>

000002aa <__divmodhi4_neg1>:
 2aa:	90 95       	com	r25
 2ac:	81 95       	neg	r24
 2ae:	9f 4f       	sbci	r25, 0xFF	; 255
 2b0:	08 95       	ret

000002b2 <__divmodhi4_neg2>:
 2b2:	70 95       	com	r23
 2b4:	61 95       	neg	r22
 2b6:	7f 4f       	sbci	r23, 0xFF	; 255

000002b8 <__divmodhi4_exit>:
 2b8:	08 95       	ret

000002ba <__udivmodhi4>:
 2ba:	aa 1b       	sub	r26, r26
 2bc:	bb 1b       	sub	r27, r27
 2be:	51 e1       	ldi	r21, 0x11	; 17
 2c0:	07 c0       	rjmp	.+14     	; 0x2d0 <__udivmodhi4_ep>

000002c2 <__udivmodhi4_loop>:
 2c2:	aa 1f       	adc	r26, r26
 2c4:	bb 1f       	adc	r27, r27
 2c6:	a6 17       	cp	r26, r22
 2c8:	b7 07       	cpc	r27, r23
 2ca:	10 f0       	brcs	.+4      	; 0x2d0 <__udivmodhi4_ep>
 2cc:	a6 1b       	sub	r26, r22
 2ce:	b7 0b       	sbc	r27, r23

000002d0 <__udivmodhi4_ep>:
 2d0:	88 1f       	adc	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	5a 95       	dec	r21
 2d6:	a9 f7       	brne	.-22     	; 0x2c2 <__udivmodhi4_loop>
 2d8:	80 95       	com	r24
 2da:	90 95       	com	r25
 2dc:	bc 01       	movw	r22, r24
 2de:	cd 01       	movw	r24, r26
 2e0:	08 95       	ret

000002e2 <_exit>:
 2e2:	f8 94       	cli

000002e4 <__stop_program>:
 2e4:	ff cf       	rjmp	.-2      	; 0x2e4 <__stop_program>
